name: Deploy Vera UI Docs to VPS (Docker)

on:
  push:
    branches: [main]
    paths:
      - "packages/docs/**"
      - "packages/ui/**"
  workflow_dispatch:

env:
  REGISTRY: ${{ secrets.DOCKER_REGISTRY || 'docker.io' }}
  IMAGE_NAME: vera-ui-docs
  CONTAINER_NAME: vera-ui-docs
  CONTAINER_PORT: 3000

jobs:
  build-and-deploy:
    name: Build Docker image and deploy to VPS
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Extract version from UI package.json
      - name: Extract UI version
        id: version
        run: |
          UI_VERSION=$(jq -r '.version' packages/ui/package.json)
          echo "UI_VERSION=$UI_VERSION" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=${UI_VERSION}-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
          echo "üì¶ UI Version: $UI_VERSION"
          echo "üè∑Ô∏è  Image Tag: ${UI_VERSION}-${GITHUB_SHA:0:7}"

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to Docker Registry
      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/docs/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME || github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME || github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # Add SSH key
      - name: Add SSH key to agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      # Add VPS host key
      - name: Add VPS host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "${{ secrets.VPS_PORT }}" -H "${{ secrets.VPS_HOST }}" >> ~/.ssh/known_hosts

      # Deploy to VPS
      - name: Deploy to VPS
        env:
          TARGET_USER: ${{ secrets.VPS_USER }}
          TARGET_HOST: ${{ secrets.VPS_HOST }}
          TARGET_PORT: ${{ secrets.VPS_PORT }}
          IMAGE_TAG: ${{ steps.version.outputs.IMAGE_TAG }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME || github.repository_owner }}
        run: |
          ssh -p "${TARGET_PORT:-22}" "${TARGET_USER}@${TARGET_HOST}" bash -s <<REMOTE_EOF
            set -euo pipefail

            # Variables
            REGISTRY="${{ env.REGISTRY }}"
            IMAGE_NAME="${{ env.IMAGE_NAME }}"
            CONTAINER_NAME="${{ env.CONTAINER_NAME }}"
            CONTAINER_PORT="${{ env.CONTAINER_PORT }}"
            IMAGE_TAG="${IMAGE_TAG}"
            DOCKER_USERNAME="${DOCKER_USERNAME}"
            FULL_IMAGE="\$REGISTRY/\$DOCKER_USERNAME/\$IMAGE_NAME:\$IMAGE_TAG"

            echo "üê≥ Deploying Docker image: \$FULL_IMAGE"

            # Login to Docker registry on VPS
            echo "${{ secrets.DOCKER_TOKEN }}" | docker login "\$REGISTRY" -u "\$DOCKER_USERNAME" --password-stdin

            # Pull the new image
            echo "üì• Pulling new image..."
            docker pull "\$FULL_IMAGE"

            # Stop and remove existing container
            echo "üõë Stopping existing container..."
            docker stop "\$CONTAINER_NAME" 2>/dev/null || true
            docker rm "\$CONTAINER_NAME" 2>/dev/null || true

            # Run new container
            echo "üöÄ Starting new container..."
            docker run -d \
              --name "\$CONTAINER_NAME" \
              --restart unless-stopped \
              -p "\$CONTAINER_PORT:3000" \
              "\$FULL_IMAGE"

            # Wait for container to be healthy
            echo "‚è≥ Waiting for container to be healthy..."
            for i in {1..30}; do
              if docker inspect --format='{{.State.Health.Status}}' "\$CONTAINER_NAME" 2>/dev/null | grep -q "healthy"; then
                echo "‚úÖ Container is healthy!"
                break
              elif [ \$i -eq 30 ]; then
                echo "‚ùå Container failed to become healthy"
                docker logs "\$CONTAINER_NAME" --tail 50
                exit 1
              else
                echo "‚è≥ Attempt \$i/30: Container not healthy yet, waiting..."
                sleep 10
              fi
            done

            # Clean up old images (keep last 3 versions)
            echo "üßπ Cleaning up old images..."
            docker images "\$REGISTRY/\$DOCKER_USERNAME/\$IMAGE_NAME" --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | tail -n +2 | sort -k2 -r | tail -n +4 | awk '{print \$1}' | xargs -r docker rmi || true

            echo "‚úÖ Deployment completed successfully!"
            echo "üìä Container status:"
            docker ps --filter name="\$CONTAINER_NAME" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          REMOTE_EOF
