name: Deploy Vera UI Docs to VPS

on:
  push:
    branches: [main]
    paths:
      - "packages/docs/**"
      - "packages/ui/**"
  workflow_dispatch:

env:
  DOCS_PATH: ./packages/docs
  UI_PATH: ./packages/ui
  BUILD_TAR: vera-ui-docs-deploy.tar.gz
  PNPM_VERSION: "10"

jobs:
  build-and-deploy:
    name: Build and deploy to VPS
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies (root workspace)
        run: pnpm install --frozen-lockfile

      # 🔑 Build UI and pack it
      - name: Build UI package
        run: |
          cd ${{ env.UI_PATH }}
          pnpm build
          pnpm pack --pack-destination ../docs

      # 🔑 Replace workspace dependency with local tarball
      - name: Install UI tarball into docs
        run: |
          cd ${{ env.DOCS_PATH }}
          UI_TGZ=$(ls *.tgz | head -n 1)
          echo "Found UI package tarball: $UI_TGZ"
          pnpm add ./$(basename "$UI_TGZ")

      # 🔨 Build docs (SSR Next.js app)
      - name: Build docs
        run: |
          cd ${{ env.DOCS_PATH }}
          pnpm build
        env:
          NODE_ENV: production

      # 📦 Create deploy package
      - name: Create deploy package
        run: |
          set -e
          cd ${{ env.DOCS_PATH }}
          TAR_PATH="$(pwd)/../../${{ env.BUILD_TAR }}"
          rm -f "$TAR_PATH"
          tar -czf "$TAR_PATH" \
            .next \
            package.json \
            ../../pnpm-lock.yaml
          if [ -d public ]; then tar -rzf "$TAR_PATH" public; fi
          if [ -f next.config.js ]; then tar -rzf "$TAR_PATH" next.config.js; fi
          echo "Created $TAR_PATH"
        shell: bash

      # 🔑 Add SSH key
      - name: Add SSH key to agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

        # 🛠 Add VPS host key
      - name: Add VPS host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "${{ secrets.VPS_PORT }}" -H "${{ secrets.VPS_HOST }}" >> ~/.ssh/known_hosts


      # 📨 Copy artifact to VPS
      - name: Copy build artifact to VPS
        env:
          TARGET_USER: ${{ secrets.VPS_USER }}
          TARGET_HOST: ${{ secrets.VPS_HOST }}
          TARGET_PORT: ${{ secrets.VPS_PORT }}
          TARGET_DIR: ${{ secrets.DEPLOY_DIR }}
        run: |
          TAR="${{ github.workspace }}/${{ env.BUILD_TAR }}"
          echo "Copying $TAR -> ${TARGET_USER}@${TARGET_HOST}:${TARGET_DIR}"
          rsync -avz -e "ssh -p ${TARGET_PORT:-22}" "$TAR" "${TARGET_USER}@${TARGET_HOST}:/tmp/${{ env.BUILD_TAR }}"
        shell: bash

      # 🚀 Extract & restart app on VPS
      - name: Extract, install & restart app on VPS
        env:
          TARGET_USER: ${{ secrets.VPS_USER }}
          TARGET_HOST: ${{ secrets.VPS_HOST }}
          TARGET_PORT: ${{ secrets.VPS_PORT }}
          TARGET_DIR: ${{ secrets.DEPLOY_DIR }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
        run: |
          ssh -p "${TARGET_PORT:-22}" "${TARGET_USER}@${TARGET_HOST}" bash -s <<'REMOTE_EOF'
            set -euo pipefail

            # Add nvm's pnpm path manually
            export PATH="/root/.nvm/versions/node/v22.12.0/bin:$PATH"

            if ! command -v pnpm >/dev/null 2>&1; then
              echo "❌ pnpm not found in PATH"
              exit 1
            fi
            echo "✅ Found pnpm at: $(which pnpm)"

            APP_DIR="${TARGET_DIR:-/var/www/vera-ui-docs}"
            ARCHIVE="/tmp/vera-ui-docs-deploy.tar.gz"
            RELEASES_DIR="$APP_DIR/releases"
            TIMESTAMP="$(date +%s)"
            NEW_RELEASE_DIR="$RELEASES_DIR/$TIMESTAMP"

            echo "Creating release dir: $NEW_RELEASE_DIR"
            sudo mkdir -p "$NEW_RELEASE_DIR"
            sudo chown "$USER":"$USER" "$NEW_RELEASE_DIR" || true

            echo "Extracting $ARCHIVE -> $NEW_RELEASE_DIR"
            tar -xzf "$ARCHIVE" -C "$NEW_RELEASE_DIR"

            # Install production deps
            cd "$NEW_RELEASE_DIR"
            if [ -f pnpm-lock.yaml ]; then
              pnpm install --prod --frozen-lockfile
            else
              pnpm install --prod
            fi

            sudo ln -sfn "$NEW_RELEASE_DIR" "$APP_DIR/current"
            sudo chown -h "$USER":"$USER" "$APP_DIR/current" || true

            rm -f "$ARCHIVE"

            if [ -n "${SERVICE_NAME:-}" ]; then
              echo "Restarting service: ${SERVICE_NAME}"
              sudo systemctl restart "${SERVICE_NAME}"
              sudo systemctl status "${SERVICE_NAME}" --no-pager
            else
              echo "No SERVICE_NAME provided; restart manually if needed."
            fi

            echo "✅ Deployment finished. New release: $NEW_RELEASE_DIR"
          REMOTE_EOF
